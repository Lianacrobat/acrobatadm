---
// Props interface
interface Props {
	title: string;
}

// Destructure props
const { title } = Astro.props;

// Import styles
import "../styles/global.css";

// Import components
import Aside from "../components/aside/Aside.astro";
import { ViewTransitions } from "astro:transitions";
---

<!doctype html>
<html lang="es">
	<head>
		<meta charset="utf-8" />
		<meta
			name="viewport"
			content="width=device-width, initial-scale=1.0"
		/>
		<meta
			name="generator"
			content={Astro.generator}
		/>

		<!-- Tailwind CSS CDN for GitHub Pages -->
		<script src="https://cdn.jsdelivr.net/npm/@tailwindcss/browser@4"></script>

		<!-- Favicon -->
		<link
			rel="icon"
			type="image/svg+xml"
			href="/favicon.svg"
		/>

		<!-- Title -->
		<title>{title}</title>

		<!-- View Transitions -->
		<ViewTransitions fallback="none" />

		<!-- Swiper CSS & JS global -->
		<link
			rel="stylesheet"
			href="https://cdn.jsdelivr.net/npm/swiper@9/swiper-bundle.min.css"
		/>
		<script src="https://cdn.jsdelivr.net/npm/swiper@9/swiper-bundle.min.js"
		></script>

		<!-- Theme initialization script - MUST be before body to prevent flashing -->
		<script is:inline>
			(function() {
				// Get theme from localStorage or cookie, fallback to system
				function getStoredTheme() {
					// Try localStorage first
					const localTheme = localStorage.getItem('theme');
					if (localTheme && ['dark', 'light', 'system'].includes(localTheme)) {
						return localTheme;
					}
					
					// Try cookie as fallback
					const cookieMatch = document.cookie.match(/theme=([^;]+)/);
					if (cookieMatch && ['dark', 'light', 'system'].includes(cookieMatch[1])) {
						return cookieMatch[1];
					}
					
					return 'system';
				}
				
				// Get system preference
				function getSystemTheme() {
					return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
				}
				
				// Apply theme immediately
				function applyThemeImmediate(theme) {
					let actualTheme;
					if (theme === 'system') {
						actualTheme = getSystemTheme();
					} else {
						actualTheme = theme;
					}
					
					document.documentElement.dataset.theme = actualTheme;
				}
				
				// Initialize theme immediately
				const theme = getStoredTheme();
				applyThemeImmediate(theme);
				
				// Store the theme for later use by the component
				window.__INITIAL_THEME__ = theme;
			})();
		</script>

		<!-- Inline Scripts -->
		<script>
			// Load SVG sprite
			fetch(`${import.meta.env.BASE_URL}icons/sprite.svg`)
				.then((response) => response.text())
				.then((svg) => {
					const div = document.createElement("div");
					div.innerHTML = svg;
					div.style.display = "none";
					document.body.appendChild(div);
				})
				.catch((error) => {
					console.warn("Failed to load SVG sprite:", error);
				});
		</script>


	</head>

	<body class="h-dvh flex tracking-tight">
		<!-- Sidebar -->
		<aside class="w-16 sm:w-48 flex-shrink-0 flex flex-col">
			<Aside />
		</aside>

		<!-- Main Content -->
		<main class="flex-1 overflow-y-auto custom-scrollbar">
			<div class="max-w-7xl mx-auto px-2">
				<slot />
			</div>
		</main>
	</body>
</html>

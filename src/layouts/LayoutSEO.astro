---
import "../styles/global.css";
import Aside from "../components/aside/Aside.astro";

export interface Props {
	// Basic SEO
	title: string;
	description: string;
	keywords?: string;
	author?: string;
	robots?: string;
	canonical?: string;
	lang?: string;
	
	// Open Graph
	og?: {
		title?: string;
		description?: string;
		image?: string;
		url?: string;
		type?: string;
		site_name?: string;
	};
	
	// Twitter Cards
	twitter?: {
		card?: string;
		site?: string;
		creator?: string;
		title?: string;
		description?: string;
		image?: string;
	};
	
	// Structured Data
	structuredData?: object;
	
	// Additional meta tags
	additionalMeta?: Array<{
		name?: string;
		property?: string;
		content: string;
	}>;
}

const {
	title,
	description,
	keywords,
	author = "AdmApp",
	robots = "index, follow",
	canonical,
	lang = "es",
	og,
	twitter,
	structuredData,
	additionalMeta = []
} = Astro.props;

// Generate canonical URL if not provided
const canonicalURL = canonical || (Astro.site ? new URL(Astro.url.pathname, Astro.site).href : Astro.url.pathname);

// Default Open Graph values
const ogData = {
	title: og?.title || title,
	description: og?.description || description,
	image: og?.image || "/assets/images/og-default.jpg",
	url: og?.url || canonicalURL,
	type: og?.type || "website",
	site_name: og?.site_name || "AdmApp"
};

// Default Twitter Card values
const twitterData = {
	card: twitter?.card || "summary_large_image",
	site: twitter?.site || "@AdmApp",
	creator: twitter?.creator || "@AdmApp",
	title: twitter?.title || title,
	description: twitter?.description || description,
	image: twitter?.image || ogData.image
};
---

<!doctype html>
<html lang={lang}>
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<meta name="generator" content={Astro.generator} />
		
		<!-- Basic SEO Meta Tags -->
		<title>{title}</title>
		<meta name="description" content={description} />
		{keywords && <meta name="keywords" content={keywords} />}
		<meta name="author" content={author} />
		<meta name="robots" content={robots} />
		<link rel="canonical" href={canonicalURL} />
		
		<!-- Open Graph Meta Tags -->
		<meta property="og:title" content={ogData.title} />
		<meta property="og:description" content={ogData.description} />
		<meta property="og:image" content={ogData.image} />
		<meta property="og:url" content={ogData.url} />
		<meta property="og:type" content={ogData.type} />
		<meta property="og:site_name" content={ogData.site_name} />
		<meta property="og:locale" content={lang === 'es' ? 'es_ES' : 'en_US'} />
		
		<!-- Twitter Card Meta Tags -->
		<meta name="twitter:card" content={twitterData.card} />
		<meta name="twitter:site" content={twitterData.site} />
		<meta name="twitter:creator" content={twitterData.creator} />
		<meta name="twitter:title" content={twitterData.title} />
		<meta name="twitter:description" content={twitterData.description} />
		<meta name="twitter:image" content={twitterData.image} />
		
		<!-- Additional Meta Tags -->
		{additionalMeta.map((meta) => (
			meta.name ? 
				<meta name={meta.name} content={meta.content} /> :
				<meta property={meta.property} content={meta.content} />
		))}
		
		<!-- Structured Data -->
		{structuredData && (
			<script type="application/ld+json" set:html={JSON.stringify(structuredData)} />
		)}

		<!-- Resource hints for better performance -->
		<link
			rel="preconnect"
			href="https://cdn.jsdelivr.net"
			crossorigin
		/>
		<link
			rel="dns-prefetch"
			href="https://cdn.jsdelivr.net"
		/>

		<!-- Critical resources -->
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />

		<!-- Inline script to prevent theme flickering -->
		<script is:inline>
			// Initialize theme immediately to prevent flickering
			function initTheme() {
				const theme =
					localStorage.getItem("theme") ||
					document.cookie
						.split("; ")
						.find((row) => row.startsWith("theme="))
						?.split("=")[1] ||
					(window.matchMedia("(prefers-color-scheme: light)").matches
						? "light"
						: "dark");

				document.documentElement.setAttribute("data-theme", theme);
				window.__INITIAL_THEME__ = theme;
			}
			initTheme();
		</script>

		<!-- Swiper CSS - loaded conditionally -->
		<link
			rel="preload"
			href="https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.css"
			as="style"
			onload="this.onload=null;this.rel='stylesheet'"
		/>
		<noscript
			><link
				rel="stylesheet"
				href="https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.css"
			/></noscript
		>

		<!-- Swiper JS - loaded asynchronously -->
		<script
			async
			src="https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.js"
		></script>

		<!-- Optimized SVG sprite loading -->
		<script is:inline>
			// Optimized SVG sprite loader with error handling and caching
			(function () {
				let spriteLoaded = false;

				function loadSVGSprite() {
					if (spriteLoaded) return Promise.resolve();

					return fetch("/assets/icons/sprite.svg", {
						cache: "force-cache",
						priority: "high",
					})
						.then((response) => {
							if (!response.ok) throw new Error(`HTTP ${response.status}`);
							return response.text();
						})
						.then((svgText) => {
							const container = document.createElement("div");
							container.innerHTML = svgText;
							container.style.cssText =
								"position:absolute;width:0;height:0;overflow:hidden;";
							container.setAttribute("aria-hidden", "true");
							document.body.insertBefore(container, document.body.firstChild);
							spriteLoaded = true;
						})
						.catch((error) => {
							console.warn("SVG sprite loading failed:", error);
							// Fallback: create empty sprite container to prevent errors
							const fallback = document.createElement("div");
							fallback.innerHTML =
								'<svg style="display:none"><defs></defs></svg>';
							document.body.appendChild(fallback);
						});
				}

				// Load immediately if DOM is ready, otherwise wait
				if (document.readyState !== "loading") {
					loadSVGSprite();
				} else {
					document.addEventListener("DOMContentLoaded", loadSVGSprite, {
						once: true,
					});
				}

				// Expose loader for dynamic imports
				window.__loadSVGSprite = loadSVGSprite;
			})();
		</script>
	</head>

	<body class="h-dvh flex tracking-tight">
		<!-- Sidebar -->
		<aside class="w-16 sm:w-48 flex-shrink-0 flex flex-col">
			<Aside />
		</aside>

		<!-- Main Content -->
		<main class="flex-1 overflow-y-auto custom-scrollbar">
			<div class="max-w-7xl mx-auto px-2">
				<slot />
			</div>
		</main>
	</body>
</html>

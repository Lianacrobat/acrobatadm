---
import type { Product } from "@data/products";
import { getProductById } from "@data/productUtils";
import { sendTelegramNotification } from "../../../utils/telegram.js";
---

<!-- Empty State -->
<div
	id="empty-favorites"
	class="text-center py-16"
>
	<div class="flex flex-col items-center gap-4">
		<div class="empty-favorites-icon mb-2">
			<svg
				class="w-20 h-20 text-[var(--text-color-soft)] mx-auto"
				fill="none"
				stroke="currentColor"
				viewBox="0 0 24 24"
			>
				<path
					stroke-linecap="round"
					stroke-linejoin="round"
					stroke-width="1"
					d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z"
				></path>
			</svg>
		</div>
		<h3 class="text-xl font-semibold text-[var(--text-color)] mb-1">
			No tienes productos favoritos
		</h3>
		<p class="text-base text-[var(--text-color-soft)] mb-4">
			Explora nuestra tienda y marca los productos que mÃ¡s te gusten.
		</p>
		<a
			href="/tienda"
			class="inline-flex items-center gap-2 px-6 py-3 rounded-lg bg-gradient-to-r from-[var(--accent-color)] to-[var(--favorite-color)] text-white font-medium hover:from-[var(--accent-color)] hover:to-[var(--favorite-color)] transition"
		>
			Explorar Tienda
			<svg
				class="w-4 h-4"
				fill="none"
				stroke="currentColor"
				viewBox="0 0 24 24"
			>
				<path
					stroke-linecap="round"
					stroke-linejoin="round"
					stroke-width="2"
					d="M9 5l7 7-7 7"
				></path>
			</svg>
		</a>
	</div>
</div>

<!-- Favorites Grid -->
<div
	id="favorites-grid-container"
	class="max-w-7xl mx-auto sm:px-6 lg:px-8 hidden"
>
	<div class="flex justify-between items-center mb-6">
		<div class="flex items-center gap-3">
			<span
				id="favorites-count"
				class="text-sm text-[var(--text-color-soft)]"
			>
				( <span id="favorites-count-number">0</span> favoritos )
			</span>
		</div>
		<button
			id="clear-all-favorites"
			class="flex items-center gap-2 px-3 py-2 text-xs text-[var(--favorite-color)] hover:text-[var(--favorite-color)] hover:bg-[var(--favorite-color)]/10 rounded-lg transition-all duration-200 font-medium border border-[var(--favorite-color)]/30 hover:border-[var(--favorite-color)]/50"
		>
			<svg
				id="trash-icon"
				class="w-4 h-4"
				fill="none"
				stroke="currentColor"
				viewBox="0 0 24 24"
			>
				<path
					stroke-linecap="round"
					stroke-linejoin="round"
					stroke-width="2"
					d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"
				></path>
			</svg>
			<span
				id="clear-text"
				class="hidden text"
				>Eliminar todo</span
			>
		</button>
	</div>
	<div
		class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-2 lg:grid-cols-4 xl:grid-cols-5 2xl:grid-cols-6 gap-4 lg:gap-6 mb-8"
	>
		<!-- Products will be rendered here by JavaScript -->
	</div>
</div>

<script>
	import type { Product } from "@data/products";
	import { getProductById } from "@data/productUtils";
	import { sendTelegramNotification } from "../../../utils/telegram.js";

	// Type declarations
	declare global {
		interface Window {
			updateFavoritesCount?: (count: number) => void;
		}
	}

	class FavoritesManager {
		private static instance: FavoritesManager;

		private constructor() {}

		static getInstance(): FavoritesManager {
			if (!FavoritesManager.instance) {
				FavoritesManager.instance = new FavoritesManager();
			}
			return FavoritesManager.instance;
		}

		getFavorites(): string[] {
			try {
				const favorites = localStorage.getItem("favorites");
				return favorites ? JSON.parse(favorites) : [];
			} catch (error) {
				console.error("Error reading favorites from localStorage:", error);
				return [];
			}
		}

		saveFavorites(favorites: string[]): void {
			try {
				localStorage.setItem("favorites", JSON.stringify(favorites));
			} catch (error) {
				console.error("Error saving favorites to localStorage:", error);
			}
		}

		async toggleFavorite(
			productId: string,
			productName: string
		): Promise<boolean> {
			const favorites = this.getFavorites();
			const index = favorites.indexOf(productId);
			if (index > -1) {
				favorites.splice(index, 1);
				this.saveFavorites(favorites);
				try {
					await sendTelegramNotification(productName, "removed");
				} catch (error) {
					console.error("Error sending telegram notification:", error);
				}
				return false;
			} else {
				favorites.push(productId);
				this.saveFavorites(favorites);
				try {
					await sendTelegramNotification(productName, "added");
				} catch (error) {
					console.error("Error sending telegram notification:", error);
				}
				return true;
			}
		}

		updateHeartIcon(button: HTMLElement, isFavorite: boolean): void {
			const heartIcon = button.querySelector(".heart-icon") as HTMLElement;
			if (heartIcon) {
				heartIcon.style.fill = isFavorite ? "var(--favorite-color)" : "none";
				heartIcon.style.color = isFavorite
					? "var(--favorite-color)"
					: "var(--text-color-soft)";
			}
		}

		updateAllHeartIcons(productId: string, isFavorite: boolean): void {
			document
				.querySelectorAll(
					`.favorite-btn[data-product-id="${productId}"] .heart-icon`
				)
				.forEach((icon) => {
					(icon as HTMLElement).style.fill = isFavorite
						? "var(--favorite-color)"
						: "none";
					(icon as HTMLElement).style.color = isFavorite
						? "var(--favorite-color)"
						: "var(--text-color-soft)";
				});
		}

		initializeButton(button: HTMLElement): void {
			const productId = button.dataset.productId;
			if (productId) {
				const isFavorite = this.getFavorites().includes(productId);
				this.updateHeartIcon(button, isFavorite);
			}
		}

		clearAllFavorites(): void {
			this.saveFavorites([]);
			window.dispatchEvent(new CustomEvent("favoritesCleared"));
		}
	}

	const favoritesManager = FavoritesManager.getInstance();

	function loadFavoriteProducts(): Product[] {
		return favoritesManager
			.getFavorites()
			.map((id) => getProductById(id))
			.filter(Boolean) as Product[];
	}

	function createProductCard(product: Product): HTMLElement {
		const card = document.createElement("div");
		card.className = "product-card";
		let imageUrl =
			"https://via.placeholder.com/400x400/374151/FFFFFF?text=Sin+Imagen";
		if (product.images && product.images.length > 0) {
			const mainImage = product.images[0];
			imageUrl =
				typeof mainImage === "string" ? mainImage : mainImage?.src || imageUrl;
		}
		card.innerHTML = `
			<!-- Desktop Card -->
			<div class="hidden lg:block bg-[var(--cajas)] rounded-lg shadow transition-shadow overflow-hidden hover:shadow-xl ">
				<div class="relative">
					<a href="/producto/${product.slug}" class="block">
						<div class="aspect-square product-image-container overflow-hidden">
							<img
								src="${imageUrl}"
								alt="${product.name}"
								class="w-full h-full object-cover group-hover:scale-105 transition-transform duration-300"
								loading="lazy"
							/>
						</div>
					</a>
					<div class="absolute top-3 right-3">
						<button
							class="favorite-btn relative w-10 h-10 bg-[var(--cajas)] rounded-full shadow-md hover:shadow-lg transition-all duration-200 flex items-center justify-center group"
							data-product-id="${product.id}"
							data-product-name="${product.name}"
							aria-label="${product.name} - Quitar de favoritos"
						>
							<svg
								class="heart-icon w-5 h-5 text-[var(--favorite-color)] transition-all duration-200 drop-shadow-sm"
								fill="currentColor"
								stroke="currentColor"
								viewBox="0 0 24 24"
							>
								<path
									stroke-linecap="round"
									stroke-linejoin="round"
									stroke-width="1.5"
									d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z"
								/>
							</svg>
						</button>
					</div>
				</div>
				<div class="p-4">
					<h3 class="font-semibold product-title mb-2 line-clamp-2">
						<a href="/producto/${product.slug}" class="hover:text-[var(--vinculo)] transition-colors text-[var(--accent-color)]">
							${product.name}
						</a>
					</h3>
					<div class="flex items-center justify-between">
						<a
							href="/producto/${product.slug}"
							class="product-link text-sm font-medium transition-colors"
						>
							Ver detalles â†’
						</a>
					</div>
				</div>
			</div>


			<!-- ðŸš€ Mobile Card -->
			<div class="flex lg:hidden h-[100px] product-card-mobile bg-[var(--cajas)] rounded-lg shadow transition-shadow overflow-hidden hover:shadow-xl">
				<div class="w-[100px] h-[100px] flex-shrink-0 relative">
					<img
						src="${imageUrl}"
						alt="${product.name}"
						class="w-full h-full object-cover"
						loading="lazy"
					/>
					<div class="absolute top-2 right-2 z-20">
						<button
							class="favorite-btn w-7 h-7 bg-white/95 shadow-xl rounded-full flex items-center justify-center group"
							data-product-id="${product.id}"
							data-product-name="${product.name}"
							aria-label="${product.name} - Quitar de favoritos"
						>
							<svg
								class="heart-icon w-3 h-3 text-[var(--favorite-color)] transition-all duration-200 drop-shadow-sm"
								fill="currentColor"
								stroke="currentColor"
								viewBox="0 0 24 24"
							>
								<path
									stroke-linecap="round"
									stroke-linejoin="round"
									stroke-width="1.5"
									d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z"
								/>
							</svg>
						</button>
					</div>
					<div class="absolute inset-0 pointer-events-none bg-gradient-to-t from-black/10 via-black/0 to-black/0"></div>
				</div>
				<div class="flex-1 p-2 flex flex-col justify-between">
					<div>
						<h3 class="text-sm font-medium product-title-mobile line-clamp-1">
							<a href="/producto/${product.slug}" class="hover:text-[var(--vinculo)] transition-colors text-[var(--accent-color)]">
								${product.name}
							</a>
						</h3>
						<p class="text-xs product-description-mobile line-clamp-2 mt-1">
							${product.shortDescription?.slice(0, 90)}...
						</p>
					</div>
					<div class="flex items-center justify-between mt-1">
						<a
							href="/producto/${product.slug}"
							class="product-link-mobile text-xs text-[var(--accent-color)] hover:text-[var(--vinculo)] transition-colors"
						>
							Ver detalles â†’
						</a>
					</div>
				</div>
			</div>
		`;
		return card;
	}

	function showEmptyState() {
		document.getElementById("empty-favorites")?.classList.remove("hidden");
		document
			.getElementById("favorites-grid-container")
			?.classList.add("hidden");
		document.getElementById("clear-all-favorites")?.classList.add("hidden");
	}

	function hideEmptyState() {
		document.getElementById("empty-favorites")?.classList.add("hidden");
		document
			.getElementById("favorites-grid-container")
			?.classList.remove("hidden");
		document.getElementById("clear-all-favorites")?.classList.remove("hidden");
	}

	function updateFavoritesCount(count: number): void {
		const countElement = document.getElementById("favorites-count-number");
		if (countElement) countElement.textContent = count.toString();
	}

	function renderFavorites() {
		const favoriteProducts = loadFavoriteProducts();
		updateFavoritesCount(favoriteProducts.length);
		if (window.updateFavoritesCount)
			window.updateFavoritesCount(favoriteProducts.length);

		if (favoriteProducts.length === 0) {
			showEmptyState();
		} else {
			hideEmptyState();
			const gridContainer = document.querySelector(
				"#favorites-grid-container .grid"
			);
			if (gridContainer) {
				gridContainer.innerHTML = "";
				favoriteProducts.forEach((product) => {
					gridContainer.appendChild(createProductCard(product));
				});
				setTimeout(initializeFavoriteButtons, 100);
			}
		}
	}

	async function handleFavoriteClick(e: Event): Promise<void> {
		const button = e.currentTarget as HTMLButtonElement;
		const productId = button.dataset.productId;
		const productName = button.dataset.productName;

		if (!productId || !productName) {
			console.error("Missing product ID or name");
			return;
		}

		if (button.disabled) return;
		button.disabled = true;
		button.classList.add("opacity-50", "cursor-wait");
		try {
			const newIsFavorite = await favoritesManager.toggleFavorite(
				productId,
				productName
			);
			favoritesManager.updateAllHeartIcons(productId, newIsFavorite);
			window.dispatchEvent(
				new CustomEvent("favoritesChanged", {
					detail: { productId, isFavorite: newIsFavorite, productName },
				})
			);
			if (window.updateFavoritesCount) {
				window.updateFavoritesCount(favoritesManager.getFavorites().length);
			}
		} finally {
			button.disabled = false;
			button.classList.remove("opacity-50", "cursor-wait");
		}
	}

	function initializeFavoriteButtons(): void {
		document.querySelectorAll(".favorite-btn").forEach((button) => {
			favoritesManager.initializeButton(button as HTMLElement);
			const newButton = button.cloneNode(true) as HTMLElement;
			if (button.parentNode) {
				button.parentNode.replaceChild(newButton, button);
			}
			newButton.addEventListener("click", handleFavoriteClick);
		});
	}

	function handleClearAllFavorites() {
		const button = document.getElementById("clear-all-favorites");
		const trashIcon = document.getElementById("trash-icon");
		const clearText = document.getElementById("clear-text");

		if (!button || !trashIcon || !clearText) return;

		// Si el texto ya estÃ¡ visible, ejecutar la acciÃ³n
		if (!clearText.classList.contains("hidden")) {
			favoritesManager.clearAllFavorites();
			renderFavorites();
			// Restaurar el icono
			trashIcon.classList.remove("hidden");
			clearText.classList.add("hidden");
			return;
		}

		// Mostrar el texto de confirmaciÃ³n
		trashIcon.classList.add("hidden");
		clearText.classList.remove("hidden");

		// Restaurar el icono despuÃ©s de 3 segundos si no se hace clic
		setTimeout(() => {
			if (!clearText.classList.contains("hidden")) {
				trashIcon.classList.remove("hidden");
				clearText.classList.add("hidden");
			}
		}, 3000);
	}

	function initializeFavorites() {
		window.addEventListener("favoritesChanged", renderFavorites);
		window.addEventListener("favoritesCleared", renderFavorites);
		const clearAllButton = document.getElementById("clear-all-favorites");
		if (clearAllButton)
			clearAllButton.addEventListener("click", handleClearAllFavorites);
		renderFavorites();
	}

	document.addEventListener("DOMContentLoaded", initializeFavorites);
	document.addEventListener("astro:page-load", initializeFavorites);
</script>

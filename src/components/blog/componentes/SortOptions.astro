---
// Componente de opciones de ordenamiento para el blog de deportes
---

<div class="sort-container">
	<!-- Etiqueta -->
	<label for="sort-select" class="sort-label">
		Ordenar por:
	</label>
	
	<!-- Selector de ordenamiento -->
	<div class="select-container">
		<select 
			id="sort-select"
			class="sort-select"
			aria-label="Opciones de ordenamiento"
		>
			<option value="fecha" data-direction="desc">Más recientes</option>
			<option value="fecha" data-direction="asc">Más antiguos</option>
			<option value="nombre" data-direction="asc">Nombre (A-Z)</option>
			<option value="nombre" data-direction="desc">Nombre (Z-A)</option>
			<option value="dificultad" data-direction="asc">Dificultad (Fácil-Difícil)</option>
			<option value="dificultad" data-direction="desc">Dificultad (Difícil-Fácil)</option>
			<option value="duracion" data-direction="asc">Duración (Corta-Larga)</option>
			<option value="duracion" data-direction="desc">Duración (Larga-Corta)</option>
			<option value="popularidad" data-direction="desc">Más populares</option>
			<option value="popularidad" data-direction="asc">Menos populares</option>
		</select>
		
		<!-- Icono de dropdown -->
		<div class="dropdown-icon">
			<svg class="icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
				<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
			</svg>
		</div>
	</div>
	
	<!-- Botón de vista (grid/list) -->
	<div class="view-controls">
		<span class="view-label">Vista:</span>
		<div class="view-buttons">
			<button 
				id="grid-view-btn"
				class="view-btn active"
				data-view="grid"
				aria-label="Vista de cuadrícula"
				title="Vista de cuadrícula"
			>
				<svg class="icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
					<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2V6zM14 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2V6zM4 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2v-2zM14 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2v-2z"></path>
				</svg>
			</button>
			<button 
				id="list-view-btn"
				class="view-btn"
				data-view="list"
				aria-label="Vista de lista"
				title="Vista de lista"
			>
				<svg class="icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
					<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 10h16M4 14h16M4 18h16"></path>
				</svg>
			</button>
		</div>
	</div>
	
	<!-- Información de resultados -->
	<div id="sort-info" class="sort-info">
		<span id="total-results">0</span> deportes
	</div>
</div>

<!-- Filtros activos -->
<div id="active-filters" class="active-filters hidden">
	<div class="filters-content">
		<span class="filters-label">Filtros activos:</span>
		<div id="filter-tags" class="filter-tags">
			<!-- Los tags se generarán dinámicamente -->
		</div>
		<button 
			id="clear-all-filters"
			class="clear-all-btn"
			type="button"
		>
			Limpiar todo
		</button>
	</div>
</div>

<style>
	.sort-container {
		display: flex;
		flex-direction: column;
		gap: 0.75rem;
		margin-bottom: 1.5rem;
		animation: slideInDown 0.3s ease-out;
	}

	@media (min-width: 640px) {
		.sort-container {
			flex-direction: row;
			align-items: center;
		}
	}

	.sort-label {
		font-size: 0.875rem;
		font-weight: 500;
		color: var(--text-color);
		white-space: nowrap;
	}

	.select-container {
		position: relative;
		flex: 1;
	}

	@media (min-width: 640px) {
		.select-container {
			flex: initial;
		}
	}

	.sort-select {
		appearance: none;
		background: var(--background);
		border: 2px solid var(--accent-color-soft);
		border-radius: 0.5rem;
		padding: 0.5rem 2.5rem 0.5rem 1rem;
		color: var(--text-color);
		cursor: pointer;
		min-width: 200px;
		transition: all 0.3s ease;
		outline: none;
		width: 100%;
	}

	.sort-select:focus {
		border-color: var(--accent-color);
		box-shadow: 0 0 0 3px rgba(var(--accent-rgb), 0.1);
	}

	.dropdown-icon {
		position: absolute;
		right: 0.75rem;
		top: 50%;
		transform: translateY(-50%);
		pointer-events: none;
		color: var(--accent-color-soft);
	}

	.view-controls {
		display: flex;
		align-items: center;
		gap: 0.5rem;
		margin-left: auto;
	}

	.view-label {
		font-size: 0.875rem;
		color: var(--accent-color-soft);
		display: none;
	}

	@media (min-width: 640px) {
		.view-label {
			display: inline;
		}
	}

	.view-buttons {
		display: flex;
		background: rgba(var(--accent-rgb), 0.1);
		border-radius: 0.5rem;
		padding: 0.25rem;
	}

	.view-btn {
		padding: 0.25rem 0.75rem;
		border-radius: 0.375rem;
		transition: all 0.2s ease;
		font-size: 0.875rem;
		color: var(--accent-color-soft);
		background: none;
		border: none;
		cursor: pointer;
		display: flex;
		align-items: center;
		justify-content: center;
	}

	.view-btn:hover:not(.active) {
		background: rgba(var(--accent-rgb), 0.2);
		color: var(--text-color);
	}

	.view-btn.active {
		background: var(--accent-color);
		color: white;
		box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
	}

	.icon {
		width: 1rem;
		height: 1rem;
	}

	.sort-info {
		font-size: 0.875rem;
		color: var(--accent-color-soft);
		display: none;
	}

	@media (min-width: 640px) {
		.sort-info {
			display: block;
		}
	}

	.active-filters {
		margin-bottom: 1rem;
	}

	.filters-content {
		display: flex;
		flex-wrap: wrap;
		align-items: center;
		gap: 0.5rem;
	}

	.filters-label {
		font-size: 0.875rem;
		color: var(--accent-color-soft);
	}

	.filter-tags {
		display: flex;
		flex-wrap: wrap;
		gap: 0.5rem;
	}

	.filter-tag {
		display: inline-flex;
		align-items: center;
		gap: 0.25rem;
		padding: 0.25rem 0.5rem;
		background: rgba(var(--accent-rgb), 0.1);
		color: var(--accent-color);
		border-radius: 0.375rem;
		font-size: 0.75rem;
		border: 1px solid rgba(var(--accent-rgb), 0.2);
		transition: all 0.2s ease;
	}

	.filter-tag:hover {
		background: rgba(var(--accent-rgb), 0.2);
		border-color: rgba(var(--accent-rgb), 0.4);
	}

	.filter-tag button {
		color: rgba(var(--accent-rgb), 0.7);
		background: none;
		border: none;
		cursor: pointer;
		padding: 0;
		display: flex;
		align-items: center;
		transition: all 0.15s ease;
	}

	.filter-tag button:hover {
		color: var(--accent-color);
		transform: scale(1.1);
	}

	.clear-all-btn {
		font-size: 0.75rem;
		color: var(--accent-color);
		background: none;
		border: none;
		cursor: pointer;
		text-decoration: underline;
		transition: color 0.2s ease;
	}

	.clear-all-btn:hover {
		color: var(--text-color);
	}

	.hidden {
		display: none;
	}

	@keyframes slideInDown {
		from {
			opacity: 0;
			transform: translateY(-10px);
		}
		to {
			opacity: 1;
			transform: translateY(0);
		}
	}

	/* Responsive */
	@media (max-width: 640px) {
		.sort-container {
			flex-direction: column;
			align-items: stretch;
			gap: 0.75rem;
		}
		
		.sort-select {
			width: 100%;
			min-width: 0;
		}
		
		.view-btn {
			padding: 0.5rem 1rem;
		}
	}
</style>

<script>
	import filterStore from '../../../utils/filterStore.js';
	import deporteFilter from '../../../utils/deporteFilter.js';

	// Variables para el manejo del ordenamiento
	let sortSelect;
	let gridViewBtn;
	let listViewBtn;
	let totalResults;
	let activeFiltersContainer;
	let filterTagsContainer;
	let clearAllFiltersBtn;
	let currentView = 'grid';

	// Función para inicializar el componente
	function initializeSortOptions() {
		sortSelect = document.getElementById('sort-select');
		gridViewBtn = document.getElementById('grid-view-btn');
		listViewBtn = document.getElementById('list-view-btn');
		totalResults = document.getElementById('total-results');
		activeFiltersContainer = document.getElementById('active-filters');
		filterTagsContainer = document.getElementById('filter-tags');
		clearAllFiltersBtn = document.getElementById('clear-all-filters');

		if (!sortSelect) return;

		// Event listeners
		sortSelect.addEventListener('change', handleSortChange);
		gridViewBtn?.addEventListener('click', () => changeView('grid'));
		listViewBtn?.addEventListener('click', () => changeView('list'));
		clearAllFiltersBtn?.addEventListener('click', clearAllFilters);

		// Inicializar con el estado actual del store
		const currentState = filterStore.getState();
		updateSortSelect(currentState.sortBy, currentState.sortDirection);
		updateActiveFilters(currentState);
		updateResultsCount();
	}

	// Manejar cambio de ordenamiento
	function handleSortChange(event) {
		const selectedOption = event.target.selectedOptions[0];
		const sortBy = selectedOption.value;
		const direction = selectedOption.dataset.direction;

		// Actualizar estado en el store
		filterStore.setSortBy(sortBy, direction);

		// Feedback visual
		sortSelect.style.transform = 'scale(0.98)';
		setTimeout(() => {
			sortSelect.style.transform = 'scale(1)';
		}, 150);
	}

	// Cambiar vista (grid/list)
	function changeView(view) {
		if (currentView === view) return;

		currentView = view;
		
		// Actualizar botones
		if (view === 'grid') {
			gridViewBtn.classList.add('active');
			listViewBtn.classList.remove('active');
		} else {
			gridViewBtn.classList.remove('active');
			listViewBtn.classList.add('active');
		}

		// Emitir evento para cambiar la vista del grid
		const viewChangeEvent = new CustomEvent('viewChanged', {
			detail: { view: view }
		});
		document.dispatchEvent(viewChangeEvent);

		// Guardar preferencia en localStorage
		localStorage.setItem('blog-view-preference', view);
	}

	// Actualizar selector de ordenamiento
	function updateSortSelect(sortBy, direction) {
		if (!sortSelect) return;

		const options = sortSelect.querySelectorAll('option');
		options.forEach(option => {
			if (option.value === sortBy && option.dataset.direction === direction) {
				option.selected = true;
			}
		});
	}

	// Actualizar filtros activos
	function updateActiveFilters(state) {
		if (!filterTagsContainer || !activeFiltersContainer) return;

		const { activeCategories, searchQuery } = state;
		const hasActiveFilters = activeCategories.length > 0 || searchQuery.length > 0;

		if (hasActiveFilters) {
			activeFiltersContainer.classList.remove('hidden');
			renderFilterTags(activeCategories, searchQuery);
		} else {
			activeFiltersContainer.classList.add('hidden');
		}
	}

	// Renderizar tags de filtros activos
	function renderFilterTags(categories, searchQuery) {
		let tagsHTML = '';

		// Tags de categorías
		categories.forEach(category => {
			tagsHTML += `
				<span class="filter-tag">
					<span>${category}</span>
					<button 
						type="button" 
						data-remove-category="${category}"
						aria-label="Remover filtro ${category}"
						title="Remover filtro"
					>
						<svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
						</svg>
					</button>
				</span>
			`;
		});

		// Tag de búsqueda
		if (searchQuery) {
			tagsHTML += `
				<span class="filter-tag">
					<span>"${searchQuery}"</span>
					<button 
						type="button" 
						data-remove-search="true"
						aria-label="Limpiar búsqueda"
						title="Limpiar búsqueda"
					>
						<svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
						</svg>
					</button>
				</span>
			`;
		}

		filterTagsContainer.innerHTML = tagsHTML;

		// Agregar event listeners a los botones de remover
		filterTagsContainer.querySelectorAll('[data-remove-category]').forEach(btn => {
			btn.addEventListener('click', () => {
				const category = btn.dataset.removeCategory;
				filterStore.toggleCategory(category);
			});
		});

		filterTagsContainer.querySelectorAll('[data-remove-search]').forEach(btn => {
			btn.addEventListener('click', () => {
				filterStore.setSearchQuery('');
			});
		});
	}

	// Limpiar todos los filtros
	function clearAllFilters() {
		filterStore.clearFilters();
		
		// Feedback visual
		clearAllFiltersBtn.style.transform = 'scale(0.95)';
		setTimeout(() => {
			clearAllFiltersBtn.style.transform = 'scale(1)';
		}, 150);
	}

	// Actualizar contador de resultados
	function updateResultsCount() {
		if (!totalResults) return;

		const state = filterStore.getState();
		const results = deporteFilter.filterDeportes({
			categories: state.activeCategories,
			searchQuery: state.searchQuery,
			sortBy: state.sortBy
		});

		totalResults.textContent = results.length;
	}

	// Cargar preferencia de vista guardada
	function loadViewPreference() {
		const savedView = localStorage.getItem('blog-view-preference');
		if (savedView && (savedView === 'grid' || savedView === 'list')) {
			changeView(savedView);
		}
	}

	// Inicializar cuando el DOM esté listo
	document.addEventListener('DOMContentLoaded', () => {
		initializeSortOptions();
		loadViewPreference();
		
		// Suscribirse a cambios del store
		filterStore.subscribe((change) => {
			if (['CATEGORY_CHANGED', 'SEARCH_CHANGED', 'SORT_CHANGED', 'FILTERS_CLEARED'].includes(change.type)) {
				updateActiveFilters(change.state);
				updateResultsCount();
			}
		});
	});
</script>